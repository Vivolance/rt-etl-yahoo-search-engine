services:
  streamlit_app:
    build: .
    image: rt-etl-yahoo-search-engine
    command: streamlit run client/streamlit_app.py
    ports:
      - "8501:8501"
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app_network
    environment:
      PYTHONPATH: /app
      SELENIUM_REMOTE_URL: http://selenium-chrome:4444/wd/hub
      SERVER_URL: http://app:8000

  selenium-chrome:
    image: selenium/standalone-chrome:latest
    ports:
      - "4444:4444"
    networks:
      - app_network
    shm_size: "2gb"  # Avoid shared memory issues
  app:
    build: .
    image: rt-etl-yahoo-search-engine
    command: python src/app.py
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      topic-creator:
        condition: service_completed_successfully
    environment:
      PYTHONPATH: /app
      ASYNC_POSTGRES_URL: postgresql+asyncpg://postgres:password@postgres:5432/yahoo_search_engine_rt
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8000:8000"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/healthcheck" ]
      interval: 10s
      timeout: 5s
      retries: 5

  yahoo_search:
    image: rt-etl-yahoo-search-engine
    command: python src/yahoo_search_process.py
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      topic-creator:
        condition: service_completed_successfully
    environment:
      PYTHONPATH: /app
      ASYNC_POSTGRES_URL: postgresql+asyncpg://postgres:password@postgres:5432/yahoo_search_engine_rt
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - app_network

  extractor:
    image: rt-etl-yahoo-search-engine
    command: python src/extractor_process.py
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      topic-creator:
        condition: service_completed_successfully
    environment:
      PYTHONPATH: /app
      ASYNC_POSTGRES_URL: postgresql+asyncpg://postgres:password@postgres:5432/yahoo_search_engine_rt
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - app_network
  migrations:
    image: rt-etl-yahoo-search-engine
    command: sh -c "alembic upgrade head"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_URL: postgresql://postgres:password@postgres:5432/yahoo_search_engine_rt
    networks:
      - app_network

  init-db:
    image: postgres:14
    command: sh -c "psql -h postgres -U $$POSTGRES_USER -d yahoo_search_engine_rt -f /docker-entrypoint-initdb.d/init-db.sql"
    depends_on:
      migrations:
        condition: service_completed_successfully
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: yahoo_search_engine_rt
      PGPASSWORD: password
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app_network

  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: yahoo_search_engine_rt
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network
  kafka:
    image: bitnami/kafka:3.4
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"    # External listener
    healthcheck:
      test: ["CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      ZOO_ENABLE_AUTH: "no"
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "/opt/bitnami/zookeeper/bin/zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  topic-creator:
    image: bitnami/kafka:3.4
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c", "/app/create_topics_docker.sh"]
    volumes:
      - ./create_topics_docker.sh:/app/create_topics_docker.sh
    networks:
      - app_network

networks:
  app_network:
    driver: bridge